Index: terraform_mappings.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- terraform_mappings.py	(date 1566460181000)
+++ terraform_mappings.py	(date 1567436055000)
@@ -1083,6 +1083,16 @@
                "writers": '\t'.join(self._SnippetWriteObjProperties(
                    ident).splitlines(True)), "name": ident.getCppName()}
         file.write(decl)
+
+        decl = """
+func Write%(camel)sRefsToResource(object %(name)s, d *schema.ResourceData, m interface{}) {
+%(writers)s
+}
+""" % {"camel": ident.getCppName(), "client": self._SnippetGetClient(),
+               "writers": '\t'.join(self._GenerateWriteResourceRefsMethod(
+                   ident, False).splitlines(True)), "name": ident.getCppName()}
+        file.write(decl)
+
         decl = """
 func Take%(camel)sAsMap(object *%(name)s) map[string]interface{} {
 \tomap := make(map[string]interface{})
@@ -1107,8 +1117,9 @@
                     required = ResolveOptional(info.getPresence())
 
             if req == required:
-                setters += """\t if d.HasChange(\"%(name)s_refs\") {\n\t%(setter)s}\n""" \
+                setters += """\t if d.HasChange(\"%(name)s_refs\") {\n\t object.Clear%(refname)s()\n\t%(setter)s}\n""" \
                            % {"name": ident.getLinkTo(link_info).getCIdentifierName().lower(),
+                              "refname": ident.getLinkTo(link_info).getCppName(),
                               "setter": self._SnippetSetObjRef(ident, link_info, enable_errors=False)}
 
         return setters
@@ -1224,7 +1235,7 @@
     def _GenerateTerraformResourceRead(self, ident, need_refs, file):
         decl = """
 func %(camel)sRead(d *schema.ResourceData, m interface{}) error {
-\tlog.Printf("%(camel)sREAD")
+\tlog.Printf("%(camel)sRead")
 \t%(client)s
 \tbase, err := client.FindByUuid("%(typename)s", d.Id())
 \tif err != nil {
@@ -1243,10 +1254,21 @@
 
         decl = """
 func %(camel)sRefsRead(d *schema.ResourceData, m interface{}) error {
-\tlog.Printf("%(camel)sRefsREAD")
+\tlog.Printf("%(camel)sRefsRead")
+\t%(client)s
+\tbase, err := client.FindByUuid("%(typename)s", d.Id())
+\tif err != nil {
+\t\treturn fmt.Errorf("[%(camel)sRefsRead] Read resource %(typename)s on %%v: (%%v)", client.GetServer(), err)
+\t}
+\tobject := base.(*%(type)s)
+\tWrite%(type)sRefsToResource(*object, d, m)
 \treturn nil
 }
-""" % {"camel": ResName(ident.getCppName())}
+""" \
+        % {"camel": ResName(ident.getCppName()),
+           "client": self._SnippetGetClient(),
+           "type": ident.getCppName(),
+           "typename": ident.getName()}
         file.write(decl)
 
 # ------------------- Properties Updater Object -------------------------------
@@ -1266,6 +1288,13 @@
 """ + refs_update
         return updaters
 
+    def _SnippetUpdateObjRefsProperties(self, ident):
+        updaters ="""
+\tclient := m.(*contrail.Client)
+\tclient.GetServer() // dummy call
+"""
+        return updaters + self._GenerateUpdateRefsMethods(ident, False)
+
 # ------------------- Update From Resource Object -----------------------------
     def _GenerateTerraformResourceUpdateFrom(self, ident, file):
         decl = """
@@ -1280,6 +1309,20 @@
                '\t'.join(self._SnippetUpdateObjProperties(
                    ident).splitlines(True)),
                "name": ident.getCppName()}
+
+        file.write(decl)
+        decl = """
+func Update%(camel)sRefsFromResource(object *%(name)s, d *schema.ResourceData, m interface{}, prefix ...string) {
+\tkey := strings.Join(prefix, ".")
+\tif len(key) != 0 {
+\t\tkey = key + "."
+\t}
+%(setters)s
+}
+        """ % {"camel": ident.getCppName(), "setters":
+               '\t'.join(self._SnippetUpdateObjRefsProperties(
+                   ident).splitlines(True)),
+               "name": ident.getCppName()}
         file.write(decl)
 
 # ------------------- Update Object -------------------------------
@@ -1290,7 +1333,7 @@
 \t%(client)s
 \tobj, err := client.FindByUuid("%(resname)s", d.Id())
 \tif err != nil {
-\t\treturn fmt.Errorf("[%(camel)sResourceUpdate] Retrieving %(type)s with uuid %%s on %%v (%%v)", d.Id(), client.GetServer(), err)
+\t\treturn fmt.Errorf("[%(camel)sUpdate] Retrieving %(type)s with uuid %%s on %%v (%%v)", d.Id(), client.GetServer(), err)
 \t}
 \tuobject := obj.(*%(type)s)
 \tUpdate%(type)sFromResource(uobject, d, m)
@@ -1311,11 +1354,28 @@
         decl = """
 func %(camel)sRefsUpdate(d *schema.ResourceData, m interface{}) error {
 \tlog.Printf("%(camel)sRefsUpdate")
+\t%(client)s
+\tobj, err := client.FindByUuid("%(resname)s", d.Id())
+\tif err != nil {
+\t\treturn fmt.Errorf("[%(camel)sRefsUpdate] Retrieving %(type)s with uuid %%s on %%v (%%v)", d.Id(), client.GetServer(), err)
+\t}
+\tuobject := obj.(*%(type)s)
+\tUpdate%(type)sRefsFromResource(uobject, d, m)
+
+\tlog.Printf("Object href: %%v", uobject.GetHref())
+\tif err := client.Update(uobject); err != nil {
+\t\treturn fmt.Errorf("[%(camel)sRefsUpdate] Update of resource %(type)s on %%v: (%%v)", client.GetServer(), err)
+\t}
 \treturn nil
 }
-""" % { "camel": ResName(ident.getCppName())}
+""" \
+        % {"camel": ResName(ident.getCppName()),
+           "client": self._SnippetGetClient(),
+           "resname": ident.getName(),
+           "type": ident.getCppName()}
         file.write(decl)
 
+
 # ------------------- Delete Object -------------------------------
     def _GenerateTerraformResourceDelete(self, ident, need_refs, file):
             decl = """
