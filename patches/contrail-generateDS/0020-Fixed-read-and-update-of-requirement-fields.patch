Index: terraform_mappings.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- terraform_mappings.py	(date 1566233442000)
+++ terraform_mappings.py	(date 1566460181000)
@@ -826,11 +826,12 @@
         return decl
 
 # ------------------- Ref Setter Snippet Object --------------------------
-    def _SnippetSetObjRef(self, ident, link_info):
+    def _SnippetSetObjRef(self, ident, link_info, enable_errors=True):
         link_to = ident.getLinkTo(link_info)
         name = link_to.getCIdentifierName().lower()
         data_obj = ""
         data_getter = ""
+
         datatype = self._getAttrType(ident, link_info)
         if datatype:
             data_obj = ", *dataObj"
@@ -840,16 +841,28 @@
                 {"type": datatype, "name": name}
 
         # TODO(KR) Value in 'for' loop is not used. This may not work at all!
+
+        if enable_errors:
+            logs_part = """\t\trefObj, err := client.FindByUuid("%(reftype)s", refId.(string))%(datagetter)s
+                  \t\tif err != nil {
+                  \t\t\treturn fmt.Errorf("[SnippetSetObjRef] Retrieving %(reftype)s by Uuid = %%v as ref for %(refname)s on %%v (%%v)", refId, client.GetServer(), err)
+                  \t\t}""" % {
+                "refname": link_to.getCppName(),
+                "reftype": link_to.getName(),
+                "datagetter": data_getter}
+
+        else:
+            logs_part = """\t\trefObj, _ := client.FindByUuid("%(reftype)s", refId.(string))%(datagetter)s""" % {
+                "reftype": link_to.getName(),
+                "datagetter": data_getter}
+
         decl = """if val, ok := d.GetOk("%(name)s_refs"); ok {
 \tlog.Printf("Got ref %(name)s_refs -- will call: object.Add%(refname)s(refObj%(refdata)s)")
 \tfor k, v := range val.([]interface{}) {
 \t\tlog.Printf("Item: %%+v => <%%T> %%+v", k, v, v)
 \t\trefId := (v.(map[string]interface{}))["to"]
 \t\tlog.Printf("Ref 'to': %%#v (str->%%v)", refId, refId.(string))
-\t\trefObj, err := client.FindByUuid("%(reftype)s", refId.(string))%(datagetter)s
-\t\tif err != nil {
-\t\t\treturn fmt.Errorf("[SnippetSetObjRef] Retrieving %(reftype)s by Uuid = %%v as ref for %(refname)s on %%v (%%v)", refId, client.GetServer(), err)
-\t\t}
+%(logs_part)s
 \t\tlog.Printf("Ref 'to' (OBJECT): %%+v", refObj)
 \t\tobject.Add%(refname)s(refObj.(*%(refname)s)%(refdata)s)
 \t}\n}\n""" % {
@@ -857,7 +870,8 @@
             "refname": link_to.getCppName(),
             "reftype": link_to.getName(),
             "datagetter": data_getter,
-            "refdata": data_obj}
+            "refdata": data_obj,
+            "logs_part": logs_part}
         return decl
 
 # ------------------- Ref Delete Snippet Object --------------------------
@@ -1040,8 +1054,25 @@
         writers = "\n"
         for prop in ident.getProperties():
             writers += self._SnippetWriteObjProperty(ident.getName(), prop)
+        writers += self._GenerateWriteResourceRefsMethod(ident, True)
         return writers
 
+    # ------------------- Properties Writer Refs Object --------------------------
+    def _SnippetWriteObjRefProperty(self, ident, link_info):
+        link_to = ident.getLinkTo(link_info)
+        decl = """
+          if ref, err := object.Get%(camel)sRefs(); err != nil {
+            var refList []interface{}
+            for _, v := range ref {
+                omap := make(map[string]interface{})
+                omap["to"] = v.Uuid
+                refList = append(refList, omap)
+            }
+            d.Set("%(name)s_refs", refList)
+        }""" % {"camel": link_to.getCppName(), "name": link_to.getCIdentifierName().lower()}
+        return decl
+
+
 # ------------------- Write To Resource Object -------------------------------
     def _GenerateTerraformResourceWriteTo(self, ident, file):
         decl = """
@@ -1063,6 +1094,41 @@
                    ident).splitlines(True)), "name": ident.getCppName()}
         file.write(decl)
 
+# ------------------- Properties Update Refs Object -------------------------------
+    def _GenerateUpdateRefsMethods(self, ident, req=False):
+        setters = ""
+        for link_info in ident.getLinksInfo():
+            if not ident.isLinkRef(link_info):
+                continue
+
+            required = False
+            for info in link_info:
+                if isinstance(info, IFMapLink):
+                    required = ResolveOptional(info.getPresence())
+
+            if req == required:
+                setters += """\t if d.HasChange(\"%(name)s_refs\") {\n\t%(setter)s}\n""" \
+                           % {"name": ident.getLinkTo(link_info).getCIdentifierName().lower(),
+                              "setter": self._SnippetSetObjRef(ident, link_info, enable_errors=False)}
+
+        return setters
+
+# ------------------- Write To Refs Resource Object -------------------------------
+    def _GenerateWriteResourceRefsMethod(self, ident, req):
+        setters = ""
+        for link_info in ident.getLinksInfo():
+            if not ident.isLinkRef(link_info):
+                continue
+
+            required = False
+            for info in link_info:
+                if isinstance(info, IFMapLink):
+                    required = ResolveOptional(info.getPresence())
+
+            if req == required:
+                setters += self._SnippetWriteObjRefProperty(ident, link_info)
+        return setters
+
 # ------------------- Create Object -------------------------------
     def _GenerateTerraformResourceCreate(self, ident, need_refs, file):
         decl = """
@@ -1191,6 +1257,13 @@
                 updaters += "if d.HasChange(\"%(name)s\") {\n\t%(setter)s}\n" % {
                     "setter": self._SnippetSetObjProperty(ident.getName(), prop),
                     "name": prop.getCIdentifierName().lower()}
+
+        refs_update = self._GenerateUpdateRefsMethods(ident, True)
+        if refs_update:
+            updaters += """
+\tclient := m.(*contrail.Client)
+\tclient.GetServer() // dummy call
+""" + refs_update
         return updaters
 
 # ------------------- Update From Resource Object -----------------------------
